<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak</title>
        <para>
            <citation>PICI</citation>
        </para>
        <para> 
            A számítógépek programozására szolgáló programozási nyelveket, három típusba/szintbe soroljuk:
        </para>
        <para>
            <itemizedlist> 
                <listitem>
                    <para>gépi nyelv (amin a számítógép beszél)</para>
                </listitem>
                <listitem>
                    <para>assembly nyelv (egyfajta átmenete a két másik szintnek)</para>
                </listitem>
                <listitem>
                    <para>magas szintű nyelv (ez már valamivel közelebb áll az általunk beszélt emberi nyelvhez)</para>
                </listitem> 
            </itemizedlist>
        </para>
        <para>
            A magas szintű programozási nyelven megírt programokat forrásprogramnak vagy forrásszövegnek (vagy akár forráskódnak) 
            hívják. Ezt viszont nem írhatjuk meg akárhogy. Minden magas szintű programozási nyelvnek megvan a maga szintaktikája 
            (a nyelvre vonatkozó formai és "nyelvtani" megszoritások) melyeket be kell tartania a programozónak, különben a fordítás
            során szintaktikai hibát kapunk. Ezen túl vannak még úgynevezett szemantikai szabályok is, melyek a tartalmiés értelmezési
            szabályok együttese.
            Tehát egy magas szintű nyelvet a szintaktikai és a szemantikai szabályok határoznak meg, különböztetnek meg a többitől.
        </para>
        <para>
            Ha megírtuk a forrásprogramot, abból még nem lesz futtathó program, hiszen a processzur nem beszéli a magas szintű nyelveket,
            ezért a programunkat a processzor számára is értelmezhetővé kell tenni, azaz lefordítani. Itt lépnek be a fordítók, mely adott 
            magas szintű nyelvből képes futtatható állományt (tárgyprogramot) előállítani.
            Ehhez a következő lépéseket hajtja végre:
        </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>lexikális elemzés (lexikális egységekre darabolja a forrásszöveget)</para>
                </listitem>
                <listitem>
                    <para>szintaktikai elemzés (szintaktikai megkötéseknek teljseülésének ellenőrzése)</para>
                </listitem>
                <listitem>
                    <para>szemantikai elemzés (szemantikai megkötéseknek teljseülésének ellenőrzése)</para>
                </listitem>
                <listitem>
                    <para>kódgenerálás (a forrásprogramból gépi nyelvű kód készítése)</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Általában egy fordító program egy tetszőlege magas szintű nyelvről egy tetszőleges gépi nyelvre fordít.
            Ezen felől léteznek olyan nyelvek (pl.: C), melyek tartalmaznak nem nyelvi elemeket is. Ilyenkor előfordítóra 
            is szükségünk van.
        </para>
        <para>
            Minden programozási nyelv rendelkezik egy úgynevezett hivatkozási nyelvvel, mely a programnyelv szabványa 
            (itt kerülnek definiálásra a szemantikai és szintaktikai megszorítások). Ezen felül léteznek implementációk, mely 
            a megszorításokat változtatva és/vagy kiegészítve platformspecifikussá (platformhoz kötötté, azaz pl.: egy 
            processzor típust vagy egy operációs rendszert támogat, míg a többin nem képes a működésre) teszi a programot. 
            Bár vannak úgynevezett crossplatform (platformok közti átjárás) megoldások, a teljes átjárást máig nem sikerült megoldani.
        </para>
        <para>A programnyelvek (rövid) osztályozása</para>
        <para>
            Imperatív nyelvek:
        </para>
        <para>
            <itemizedlist>
                <listitem><para>Algoritmikus nyelv</para></listitem>
                <listitem><para>Utasítások sorozatából áll (a processzor sorrol sorra hajtja végre a parancsokat)</para></listitem>
                <listitem><para>Fő programozási eszköze a változó (adatok tárolására szolgál és rajta keresztül közvetlen elérhetőek a memória
                    egységek)</para>
                </listitem>
                <listitem><para>Neumann-architektúra alapú</para></listitem>
                <listitem><para>Alcsoportjai:</para></listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem><para>Eljárásorientált</para></listitem>
                <listitem><para>Objektumorientált (ma már inkább ez az általános)</para></listitem>
            </itemizedlist>
        </para>
        <para>
            Dekleratív nyelvek:
        </para>
        <para>
            <itemizedlist>
                <listitem><para>Nem algoritmikus</para></listitem>
                <listitem><para>A programozó csak a problémát veti fel, a megoldást a nyelv implementációi adják</para></listitem>
                <listitem><para>Korlátozott a memóriaműveletek lehetősége (szinte nincs is)</para></listitem>
                <listitem><para>Alcsoportjai:</para></listitem>
            </itemizedlist>
            <itemizedlist>
                <listitem><para>Funkcionális nyelvek</para></listitem>
                <listitem><para>Logikai nyelvek</para></listitem>
            </itemizedlist>
        </para>
        <para>Karakterkészlet</para>
        <para>
            Ahogyan az írott nyelvnek, úgy a programoknak is az alapkövei a karakterek. Tekinthetjük atomi egységeinek is, 
            hiszen nem tudjuk tovább bontani. Karakterekből épül fel minden. Viszont nem mindegy hogy milyen karaktert mikor és hol
            használunk, ugyanis vannak karakterek melyeket nem támogat egy nyelv, vannak speciális tulajdonsággal felruházott karakterek
            , stb. A félreértések elkerülése véget a karakterek alatt nem csak a betűket kell érteni, hanem:
        </para>
        <para>
            <itemizedlist>
                <listitem><para>betűk</para></listitem>
                <listitem><para>számok</para></listitem>
                <listitem><para>egyéb karakterek</para></listitem>
            </itemizedlist>
        </para>
        <para>
            A legtöbb nyelv nem támogatja a nemzeti nyelveket, kizárólag az angol abc betűit (általánosan csak a nagybetűket támogatja
            az összes nyelv, kisbetűk esetén már vannak eltérések és ezen felül is vannak, melyek nem különböztetik meg a kis- és 
            nagybetűket, míg mások igen)
        </para>
        <para>
            A számjegyek helyzete már jóval egyszerűbb, ugyanis a decimális számrendszer az általánosan elterjedt.
        </para>
        <para>
            Az egyéb karakterek közé tartoznak az elhatároló jelek, a műveleti jelek, az írásjelek és a speciális karakterek. Ezeknek
            általában külön szerepük van a programnyelvben.
        </para>
        <para>Lexikális egységek</para>
        <para>
            Röviden azok az elemei a forráslódnak melyet a fordító a lexikális elemzés során azonosít és tokenizál. Fajtái:
        </para>
        <para>
            <itemizedlist>
                <listitem><para>Többkarakteres szimbólum: karaktersorozat melynek az adott nyelv tulajdonít jelentést.
                    Gyakran elhatároló vagy operátori funkciót töltenek be.</para>
                </listitem>
                <listitem><para>Szimbólikus nevek: lehet azonosító, kulcsszó vagy standard azonosító</para></listitem>
                <listitem><para>Címke: utasítások megjelölésére szolgál objektumorientált környezetben, későbbi hivatkozás céljából.</para></listitem>
                <listitem><para>Megjegyzés: megjegyzéseket írhatunk a kódunk későbbi olvasóinak (akár magunknak is) az egyszerűbb
                    értelmezés céljából. Ezeket a sorokat a fordító figyelmen kívűl hagyja.</para>
                </listitem>
                <listitem><para>Literál: másnéven konstansok, tehát olyan értékek amik nem változnak</para></listitem>
            </itemizedlist>
        </para>
    </section>        
    <section>
        <title>Keringhan.Ritchie: A C programozási nyelv</title>
        <para>
            Ebből a könyvből nekünk az első fejezetet kellett elolvasni. A könyv maga mondhatni alapvető olvasmány mindenkinek aki C nyelvet akar tanulni. Nekem is volt már hozzá szerencsém korábban 
            is. Maga az első fejezet eléggé az alapoktól kezd, ami persze egyáltalán nem meglepő és nem is gond, hiszen az első fejezete csupán az olvasmánynak. Nem lehet mindent a közepéről kezdeni.
            Szerencsémre a C nyelv se volt új, viszont így tényleg csak kevés meglepetéssel szolgált.  
        </para>
        <para>
            Az első szakaszban klasszikusan nyit a könyv. Próbálja rávezetni az olvasót, hogy kezdjen bele, írja meg első programját, mely ugye a klasszikus, mindenki által ismert "Hello, World!" 
            (A könyvben "Figyelem emberek!") program, mely ugyebár bemutatja a nyelv alapvető szintaxisát egy egyszerű konzolra történő kiíratás során. Ugye ehhez meg kell hívnunk egy könyvtárat, el kell 
            készíteni a main-t és meg kell írnunk az utasításunkat (meg persze nem hagyhatjuk le a return 0-t sem). 
        </para>
        <para>
            A következő szakasz a változókat mutatta be. Ezt a szakaszt különösen fontosnak tartom, mert annak ellenére hogy alapköve lenne a programozásnak, sok magukat programozónak nevező egyén sincs 
            velük kellően tisztában. Ebben a szakaszban szóba került a változók megfelelő deklarálása. Értem ez alatt a típus megadását. Nyílván ez sokaknak egyértelmű, de aki esetlegesen még sose programozott 
            vagy mondjuk pythont használt, annak ez nem feltétlenűl egyszerű.  
        </para>
        <para>
            Ezután a karakterekről esett szó. Itt megjegyezném, hogy nem nagyon használtam korábban C-t és engem külön meglepett, hogy nem tud a nyelv <type>sztringeket</type> kezelni. A megoldás persze 
            pofon egyszerű, szimplán csak karaktertömbként kell kezelnünk és már meg is oldódott a probléma. A karaktereket viszont be is kell kérnünk valahogy, melyre alkalmas a <function>getchar()</function> és 
            a <function>putchar()</function>. Itt megjegyezzük, hogy a <function>printf()</function>-el és a <function>scanf()</function>-el is elérhető, viszont azok nem csak <type>char</type>-okat tudnak kezelni, 
            ezért érdemes őket probléma specifíkusan kezelni.  
        </para>
        <para>
            Ezekután megismerkedtünk az első adatszerkezetünkkel, a tömbökkel. Ugye az előbb már szóbakerültek a <type>sztringek</type> esetén. Igazából a tömbök használata egyszerű. Egyszer kell csak megérteni, 
            hogy az informatikában a számozás a nullától indul és pofon egyszerűvé válik a használatuk. 
        </para>
        <para>
            Végül eljutunk a kedvenceimhez, a függvényekhez. Bevallom, az alapok tanulásában ez okozta számomra a legnagyobb nehézséget, de miután rájöttem, hogy miért jó kiszervezni a feladatokat függvényeknek 
            máris sokkal könnyebb volt megjegyezni az alapvető szintaxisukat. Megjegyszem, hogy általános probléma hogy keverik a függvényeket az eljárásokkal, még én is gyakran függvényként hivatkozok rájuk. Viszont 
            a különbség pofon egyszerű. A függvényeknek van visszatérési értékük, míg az eljárásoknak nincs. Tehát az eljárás dolga végeztével nem ad vissza semmit. 
        </para>
    </section>
    <section>
        <title>10.4. Python bevezetés</title>
        <para>
            Nehéz elkezdenem kicsit ezt a bevezetőt, egyszerűen csak nehéz megtalálni a megfelelő szavakat. Az elmúlt években elég nagy hangot kapott a python (2018-2019, az év programozási nyelve volt). Eredetileg arra lett kitalálva hogy egy 
            egyszerűsített szintaxissal azok is meg tudják tanulni, akiket egy java hello world programtól a sírás kerülget (ide tartoznék én is). Mikor elkezdett érdekelni a programozás akkor kacsintgattam 
            kicsit ezzel a nyelvvel, de úgy igazán nem fogott meg. Aztán elkezdtem c++-t tanulni, amivel kicsit más irányba indultam el. Őszintén szólva kicsit lenéztem a nyelvet a c++ után, amit mélyen 
            röstellek, hiszen számtalan lehetőséget takar, melyek most meg is mutatkoztak. A Microsoft által gondozott Minecraft Project Malmo kereteiben volt lehetőségünk Steve-et, a játék főszereplőjét, 
            python nyelven programoznunk, későbbiekben c++-ban is. Őszintén szólva itt jött elő az, hogy mennyivel másabb pythonban dolgozni. Végereményben arra jutottam, hogy a nyáron szeretnék jobban megismerkedni 
            ezzel a nyelvvel, mert nagyon megtetszett. 
        </para>
        <para>
            Na de ne kalandozzunk el ilyen messze. Az első számú dolog amit érintenünk kell, az a szintaxis. Amiket itt nem fogunk sűrűn látni, az például a pontosvessző és a kapcsos zárójel. 
            Az utóbbi fő oka, hogy a python behúzás alapú, tehát azt hogy meddig tart egy függvény vagy egy ciklus, azt nem az határozza meg, hogy mikor zárjuk a kapcsost, hanem h meddig tart a szakasz, az 
            adott behúzási szinttel. Ezt igazából hamar meg lehet szokni. A másik nagyon furcsa dolog a számomra, az a for ciklusok szintaxisa volt. Jóhiszeműen bepróbálkoztam itt is a klasszikus deklarálunk egy 
            változót mondjuk <varname>i</varname> néven, megmondom neki hogy meddig tart és hogy iterációnként mennyit változzon az értéke. A python meg csak pislogott, hogy mégis mit akarok én tőle. Persze a 
            szintaxisával semmi baj nincs, mert a klasszikus gondolkodásban egyszerűbb meghatározni egy ciklust, mely 10-ig megy így: <screen><![CDATA[ for i in Range(10):]]></screen>, mint sem így: 
            <screen><![CDATA[ for(int i = 0; i < 10; i++)]]></screen>. 
        </para>
    </section>
    <section>
        <title>10.2. Szoftverfejlesztés C++ nyelven</title>
        <para>
            Végül pedig öreg barátom, a C++. A nyelv maga a C-hez nagyon közel áll, annak egyfajta továbbfejlesztés vagy újragondolása. Avatatlanoknak például meglepő lehet, hogy a <type>g++</type> 
            kulcsszó, amivel a c++ programokat fordítjuk, natívan, gond nélkül fordítják a C programokat is. Viszont ez fordítva nem feltétlenűl van így, ugyanis vannak elemek melyekugyebár a C-ben még 
            nem álltak a rendelkezésünkre, viszont C++-ban meg már természetes. Ehhez ugye nem kell messzire menni, elég a második részt elolvasnun (ami a C nyelvről szólt), mert ott említettem, hogy nekem 
            egyértelmű volt a <type>string</type> típus használata, viszont a C-nek kevésbé. 
        </para>
        <para>
            Egy másik alapvető típust viszont ott nem említettem. Méghozzá a <type>bool</type>, mely a logikai változók típusa. Tehát értéke vagy igaz vagy hamis. Ezt is egyértelműnek vettem persze, hogy nyílván 
            a C is ugyan úgy ismeri. Hát nem. Helyettük lehet szimpla <type>integereket</type> használni. Nyílván itt az érték alapvetőleg lényegtelen lenne, csak az a fontos hogy két különböző legyen és konstansan 
            azt használjuk, mégis javaslom mindenkinek az alapvető bináris módszert, azaz van áram vagy nincs áram, másképp 1 vagy 0. 
        </para>
        <para>
            Az utolsó bekezdés vagy fejezet a windows rendszerű, IDE-s fordításról, futtatásról szólt. Bár az elmúlt 3 évben már boldog linux felhasználó vagyok, eredetileg én is windowson tanultam ezeket. 
            Ezért nem idegen tőlem ez a téma se és meg tudom érteni, hogy ezt külön taglalnia kell egy szakkönyvnek. Hálisten azóta már teljes lelki nyugalommal élem az életemet terminálból. Ugyanis ez csupán egy sor a 
            parancssorunkban és a program már le is fordult. Ha speciálisan akarjuk fordítani, akkor csak megadjuk a megfelelő kapcsolót. Ha meg más kimenetet akarunk, akkor arra is van kapcsoló (-o). Nyílván 
            sokaknak ijesztő lehet elsőre ez a sok minden, hogy hogyan lehet megjegyezni, de igazából egyáltalán nem vészes. Hamar meg lehet szokni és sok fejfájástól kimélnek meg. 
        </para>
    </section>
    
</chapter>                
