<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Szoftmax Py MNIST</title>
        <tip>
            <title>Filmajánló</title>
            <para>
                West World 
                <link xlink:href="https://www.imdb.com/title/tt0475784/">https://www.imdb.com/title/tt0475784/</link>
            </para>          
        </tip>
        <para>
            Python
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/j7f9SkJR3oc">https://youtu.be/j7f9SkJR3oc</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0">https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0</link> (/tensorflow-0.9.0/tensorflow/examples/tutorials/mnist/), <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol</link>  
        </para>
        <para>
            A Tensorflow egy nyílt forrású platform a gépi tanuláshoz. Rengeteg segédkönyvtárral és adatbázissal annak megkönnyítése 
            érdekében. De mielőtt nagyon előreszaladnánk, mi is az a gépi tanulás? A gépi tanulás lényegében egy algoritmus amivel 
            megetetünk sok-sok adatot (ún. training data)  amiből felépít aztán egy matematikai modellt. Felhasználása pedig szinte végtelen. 
            Kezdve az emailek filterezésétől, a fordítóprogramokon át egészen az önvezető autókig. 
        </para>
        <para>
            És mi az MNIST? 
            Az MNIST egy aránylag nagy adatbázis mely kézzel írt arab számokat tartalmaz. 
            Ebből tervezünk neki 60000 darabot megtanítani, majd 10000-rel megnézzük, hogy mennyire pontos. 
        </para>
    </section>        

<!--
    <section>
        <title>Szoftmax R MNIST</title>
        <para>
            R            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->
    
    <section>
        <title>Mély MNIST</title>
        <para>
            Python            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Ez a program hasonló az előzőhöz. Csak itt az a cél hogy az általunk adott képen lévő számot ismerje fel. 
            Kezdésként ugyan úgy megetetjük vele a 60000 darabú training data-t, majd az azokból felállított model segítségével próbál 
            viszonyítani, hogy vajon a képen szereplő számjegy melyik lehet. Ehhez az input képet eltárolja numpy tömbként, hogy egyszerűbben 
            lehessen vizsgálni. 
        </para>
        <programlisting language='python'>
            <![CDATA[ 
            import tensorflow as tf
            from tensorflow.keras.models import Sequential
            from tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D
            
            from PIL import Image
            import numpy as np
            import sys
            
            #tf.compat.v1.enable_eager_execution(
            #    config=None, device_policy=None, execution_mode=None
            #)
            
            #physical_devices = tf.config.experimental.list_physical_devices('GPU')
            #assert len(physical_devices) > 0, "Not enough GPU hardware devices available"
            #tf.config.experimental.set_memory_growth(physical_devices[0], True)
            
            (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
            
            x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
            x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
            x_train = x_train.astype('float32')
            x_test = x_test.astype('float32')
            x_train /= 255
            x_test /= 255
            
            model = Sequential()
            model.add(Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))
            model.add(MaxPooling2D(pool_size=(2, 2)))
            model.add(Flatten())
            model.add(Dense(128, activation=tf.nn.relu))
            model.add(Dropout(0.2))
            model.add(Dense(10,activation=tf.nn.softmax))
            
            #tb_log_dir = "./cnn_tb"
            #file_writer = tf.summary.create_file_writer(tb_log_dir)
            #file_writer.set_as_default()
            #tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=tb_log_dir, profile_batch=0)
            
            model.compile(optimizer='adam', 
                          loss='sparse_categorical_crossentropy', 
                          metrics=['accuracy'])
            
            #model.fit(x=x_train,y=y_train, epochs=10, callbacks=[tensorboard_callback])
            model.fit(x=x_train,y=y_train, epochs=10)
            
            model.evaluate(x_test, y_test)
            
            input_image = np.array(Image.open(sys.argv[1]).getdata(0).resize((28, 28), 0))
            
            pred = model.predict(input_image.reshape(1, 28, 28, 1))
            
            print (pred)
            
            print("The number is = ", pred.argmax())
            ]]>
        </programlisting>
        <screen>
            <![CDATA[ 
            2020-04-28 14:05:43.609568: W tensorflow/core/framework/cpu_allocator_impl.cc:81] Allocation of 31360000 exceeds 10% of system memory.
            32/10000 [..............................] - ETA: 30s - loss: 0.0719 - accurac  
            384/10000 [>.............................] - ETA: 3s - loss: 0.0667 - accuracy  
            704/10000 [=>............................] - ETA: 2s - loss: 0.0466 - accuracy  
            928/10000 [=>............................] - ETA: 2s - loss: 0.0426 - accuracy 
            1184/10000 [==>...........................] - ETA: 2s - loss: 0.0681 - accuracy 
            1536/10000 [===>..........................] - ETA: 2s - loss: 0.0837 - accuracy 
            1888/10000 [====>.........................] - ETA: 1s - loss: 0.0865 - accuracy 
            2272/10000 [=====>........................] - ETA: 1s - loss: 0.0898 - accuracy 
            2656/10000 [======>.......................] - ETA: 1s - loss: 0.0920 - accuracy 
            3008/10000 [========>.....................] - ETA: 1s - loss: 0.0881 - accuracy 
            3360/10000 [=========>....................] - ETA: 1s - loss: 0.0837 - accuracy 
            3744/10000 [==========>...................] - ETA: 1s - loss: 0.0840 - accuracy 
            4128/10000 [===========>..................] - ETA: 1s - loss: 0.0877 - accuracy 
            4512/10000 [============>.................] - ETA: 0s - loss: 0.0886 - accuracy 
            4896/10000 [=============>................] - ETA: 0s - loss: 0.0871 - accuracy 
            5248/10000 [==============>...............] - ETA: 0s - loss: 0.0817 - accuracy 
            5600/10000 [===============>..............] - ETA: 0s - loss: 0.0783 - accuracy 
            5920/10000 [================>.............] - ETA: 0s - loss: 0.0767 - accuracy 
            6272/10000 [=================>............] - ETA: 0s - loss: 0.0755 - accuracy 
            6656/10000 [==================>...........] - ETA: 0s - loss: 0.0756 - accuracy 
            7040/10000 [====================>.........] - ETA: 0s - loss: 0.0721 - accuracy 
            7392/10000 [=====================>........] - ETA: 0s - loss: 0.0691 - accuracy 
            7680/10000 [======================>.......] - ETA: 0s - loss: 0.0667 - accuracy 
            7968/10000 [======================>.......] - ETA: 0s - loss: 0.0643 - accuracy 
            8288/10000 [=======================>......] - ETA: 0s - loss: 0.0622 - accuracy 
            8672/10000 [=========================>....] - ETA: 0s - loss: 0.0604 - accuracy 
            9056/10000 [==========================>...] - ETA: 0s - loss: 0.0606 - accuracy 
            9440/10000 [===========================>..] - ETA: 0s - loss: 0.0581 - accuracy 
            9792/10000 [============================>.] - ETA: 0s - loss: 0.0610 - accuracy
            10000/10000 [==============================] - 2s 161us/sample - loss: 0.0604 - 
            accuracy: 0.9861
            [[0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]]
            The number is =  8
         ]]>
        </screen>
        <para>
            Itt még megjegyezném, hogy a program a cpu-t használja a számításhoz, ami egy kicsit megterhelő volt a saját processzoromnak 
            ezáltal a számítás is lassú volt. Viszont aránylag pontosan megtudta állapítani, hogy melyik szám is volt látható az adott képen. 
        </para>
    </section>        
<!--
    <section>
        <title>Deep dream</title>
        <para>
            Keras            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->                  
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/bAPSu3Rndi8">https://youtu.be/bAPSu3Rndi8</link>      
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A Project Malmo az első és egyetlen olyan mod a Minecrafthoz amit a Microsoft adott ki. A lényege hogy a mesterséges intelligencia 
            kutatás iránt felkeltsék a fiatalabb generáció érdeklődését is azáltal, hogy átültetik ezt a minecraft világába, ahol már már 
            játékosan lehet fejleszteni egy egy intelligen ágenst. 
        </para>
        <para>
            Sajnos dokumentációkból minimális van. Tutoriál videók meg írások pedig lényegében nem is léteznek. Ezért elég nehéz elkezdeni 
            háttérismeretek nélkül, de ez betudható annak is, hogy még korai szakaszában van a kezdeményezés. Egyébként annak ellenére, hogy a 
            Minecraft java alapú, a Malmo támogat más programozási nyelveket is, úgyis mint python, c++, c#. Mi elsősorban a pythont használtunk, 
            de volt lehetőségünk a c++ba is belekostolni. 
        </para>
        <para>
            Mi ugye a félév alatt aránylag sokat foglalkoztunk ezzel a platformmal és a kezdeti nehézségek legyűrése után azt lehet mondani, 
            hogy igen érdekes felület, mely sok lehetőséget rejt még magában a jövőre nézve. Azon se lepődnék meg, ha a közeljövő egy kiemelkedő 
            kutatásának a Malmo lenne az alapja. 
        </para>
        <para>
            Megint csak fontosnak tartom megjegyezni, hogy ami még nehézséget nyújtott az a két féle mozgásrendszer: az abszolút és a 
            diszkrét.
        </para>
        <para>
            Az abszolút lényegében úgy működik mintha a program által szimulálnánk az adott billenytű lenyomásokat adott ideig. Ezzel az a 
            fő probléma hogy ezáltal az irányítás meglehetősen pontatlan. Nehéz példáúl pontosan 90 fokot fordulni, szinte lehetetlen. 
        </para>
        <para>
            A diszkrét ezzel ellentétben pedig inkább egy gridbase movementre (rács alapú mozgás, lsd. pl.: sakk, vagy a legtöbb táblás 
            társasjáték) hajaz. Itt van lehetőségünk a pontos mozgásra, melyet a minecraft blokk alapú világa tesz lehetővé. Viszont ami nehézséget 
            okoz ebben a módban, hogy Steve (a játékos) fejét csak 45 fokonként lehet forgatni, ezért nincs lehetőségünk arra, hogy mondjuk 
            csak 20 fokkal nézzünk balra.   
        </para>
    </section>
    <section>
        <title>Malmo feladat:</title>
        <para>
            Ennél a feladatnál javítanunk kellett egy kapott kódot, hogy legalább egy virággal többet szedjen mint elődje. Az eredeti 19-et 
            szedett, mi ezt tudtuk nagy nehezen feltornászni 20-ig. Egyébként nem egyszerű egy kapott kódot továbbfejleszteni. Elsőként meg kell 
            érrteni egyáltalán a kiinduló kódot, át gondolni hogy hol léphet fel olyan eshetőség, amin lehetne javítani és azt is ki kell találni, hogy 
            azt hogy lehetne javítani. Ez a probléma két napunkat vette igénybe. Végül is sikerült átdolgozni. Főleg a virág szedő mechanikán 
            változtattunk, hogy miután összeszedi akkor ne álljon neki forgolódni, meg ilyenek, hanem egyszerűen ugráljon oldalra kétszer. 
            Ezen kívűl még optimalizáltunk pár értéket. Egyébként 20-nál picit többet szedett, de a videó felvétel közben ennyit sikerült neki.
        </para>
        <programlisting language="python">
<![CDATA[ 
from __future__ import print_function
# ------------------------------------------------------------------------------------------------
# Copyright (c) 2016 Microsoft Corporation
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ------------------------------------------------------------------------------------------------

# Tutorial sample #2: Run simple mission using raw XML

# Added modifications by Norbert Bátfai (nb4tf4i) batfai.norbert@inf.unideb.hu, mine.ly/nb4tf4i.1
# 2018.10.18, https://bhaxor.blog.hu/2018/10/18/malmo_minecraft
# 2020.02.02, NB4tf4i's Red Flowers, http://smartcity.inf.unideb.hu/~norbi/NB4tf4iRedFlowerHell
# 2020.03.02, https://github.com/nbatfai/RedFlowerHell
# 2020.03.07, "_smartSteve": nof_turn (number of turns) is replaced by the dict self.collectedFlowers 
# 2020.03.11, "_bu": bottom up, s4v3: https://youtu.be/VP0kfvRYD1Y

from builtins import range
import MalmoPython
import os
import sys
import time
import random
import json
import math

if sys.version_info[0] == 2:
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)  # flush print output immediately
else:
    import functools
    print = functools.partial(print, flush=True)

# Create default Malmo objects:

agent_host = MalmoPython.AgentHost()
try:
    agent_host.parse( sys.argv )
except RuntimeError as e:
    print('ERROR:',e)
    print(agent_host.getUsage())
    exit(1)
if agent_host.receivedArgument("help"):
    print(agent_host.getUsage())
    exit(0)

# -- set up the mission -- #
missionXML_file='nb4tf4i_d.xml'
with open(missionXML_file, 'r') as f:
    print("NB4tf4i's Red Flowers (Red Flower Hell) - DEAC-Hackers Battle Royale Arena\n")
    print("NB4tf4i vörös pipacsai (Vörös Pipacs Pokol) - DEAC-Hackers Battle Royale Arena\n")
    print("The aim of this first challenge, called nb4tf4i's red flowers, is to collect as many red flowers as possible before the lava flows down the hillside.\n")
    print("Ennek az első, az nb4tf4i vörös virágai nevű kihívásnak a célja összegyűjteni annyi piros virágot, amennyit csak lehet, mielőtt a láva lefolyik a hegyoldalon.\n")    
    print("Norbert Bátfai, batfai.norbert@inf.unideb.hu, https://arato.inf.unideb.hu/batfai.norbert/\n")
    print("Version history\n", "Code: ", sys.argv[0], ", series 4 v.3, bottom up, max 18 poppies. Norbert Bátfai, nbatfai@gmail.com\n")
    print("Loading mission from %s" % missionXML_file)
    mission_xml = f.read()
    my_mission = MalmoPython.MissionSpec(mission_xml, True)
    my_mission.drawBlock( 0, 0, 0, "lava")

class Hourglass:
    def __init__(self, charSet):
        self.charSet = charSet
        self.index = 0
    def cursor(self):
        self.index=(self.index+1)%len(self.charSet)
        return self.charSet[self.index]

hg = Hourglass('|/-\|')

class Steve:
    def __init__(self, agent_host):
        self.agent_host = agent_host
        
        self.x = 0
        self.y = 0
        self.z = 0
        self.yaw = 0
        self.pitch = 0
        
        self.front_of_me_idx = 0
        self.front_of_me_idxr = 0
        self.front_of_me_idxl = 0        
        self.right_of_me_idx = 0
        self.left_of_me_idx = 0        
        
        self.nof_red_flower = 0
        self.lookingat = ""
        self.attackLvl = 0
        
        self.collectedFlowers = {}
        for i in range(100):
            self.collectedFlowers[i] = False

        self.collectedFlowers[1] = True
        self.collectedFlowers[2] = True

    def checkInventory(self, observations):
        for i in range(2):
            hotbari = 'Hotbar_'+str(i)+'_item'
            hotbars = 'Hotbar_'+str(i)+'_size'
            slot0_contents = observations.get(hotbari, "")
            if slot0_contents == "red_flower":
                slot0_size = observations.get(hotbars, "")
                if self.nof_red_flower < slot0_size :
                    self.nof_red_flower = slot0_size                                            
                    print("            A RED FLOWER IS MINED AND PICKED UP")
                    print("            Steve's lvl: ", self.y, "Flower lvl: ", self.attackLvl) 
                    self.collectedFlowers[self.attackLvl] = True
                    self.agent_host.sendCommand( "look -1" )
                    time.sleep(.4)
                    if self.lvlUp(observations.get("nbr3x3", 0)):
                        return True
    def pickUp(self):
        self.agent_host.sendCommand( "attack 1" )
        time.sleep(.23)#.23
        self.attackLvl = self.y

    def lvlUp(self, nbr):
        if self.collectedFlowers[self.y]:
            #self.turnToWall(nbr)
            if nbr[self.left_of_me_idx+9]=="dirt":
                self.agent_host.sendCommand( "jumpstrafe -1" )
                time.sleep(.10)#.2
            elif nbr[self.right_of_me_idx+9]=="dirt":
                self.agent_host.sendCommand( "jumpstrafe 1" )
                time.sleep(.10)#.2
            elif nbr[self.front_of_me_idx+9]=="dirt":
                self.agent_host.sendCommand( "jumpmove 1" )
                time.sleep(.10)#.2
            else:
                self.turnToWall(nbr)                
                self.agent_host.sendCommand( "move 1" )
                time.sleep(.10)#.2
            return True
        else:
            return False

    def idle(self, delay):
        #print("      SLEEPING for ", delay)
        time.sleep(delay)
                                                        
    def isInTrap(self, nbr):
            
        dc = 0    
        nbri = [9,10,11,12,14,15,16,17]    
        for i in range(1, len(nbri)):
            if nbr[nbri[i]]=="dirt" :
                dc = dc + 1            
        return dc > 5
    
    def turnFromWall(self, nbr):
        if (nbr[self.right_of_me_idx+9]=="air" and nbr[self.left_of_me_idx+9]=="dirt") or (nbr[self.right_of_me_idx]=="air" and nbr[self.left_of_me_idx]=="dirt"):
            self.agent_host.sendCommand( "turn 1" )
        else:
            self.agent_host.sendCommand( "turn -1" )
        time.sleep(.2)#.2

    def turnToWall(self, nbr):
        if (nbr[self.right_of_me_idx+9]=="air" and nbr[self.left_of_me_idx+9]=="dirt") or (nbr[self.right_of_me_idx]=="air" and nbr[self.left_of_me_idx]=="dirt"):
            self.agent_host.sendCommand( "turn -1" )
        else:
            self.agent_host.sendCommand( "turn 1" )
        time.sleep(.2)#.2

    def calcNbrIndex(self):
        if self.yaw >= 180-22.5 and self.yaw <= 180+22.5 :
            self.front_of_me_idx = 1
            self.front_of_me_idxr = 2
            self.front_of_me_idxl = 0
            self.right_of_me_idx = 5
            self.left_of_me_idx = 3            
        elif self.yaw >= 180+22.5 and self.yaw <= 270-22.5 :
            self.front_of_me_idx = 2 
            self.front_of_me_idxr = 5
            self.front_of_me_idxl =1             
            self.right_of_me_idx = 8
            self.left_of_me_idx = 0            
        elif self.yaw >= 270-22.5 and self.yaw <= 270+22.5 :
            self.front_of_me_idx = 5
            self.front_of_me_idxr = 8
            self.front_of_me_idxl = 2
            self.right_of_me_idx = 7
            self.left_of_me_idx = 1                        
        elif self.yaw >= 270+22.5 and self.yaw <= 360-22.5 :
            self.front_of_me_idx = 8            
            self.front_of_me_idxr = 7
            self.front_of_me_idxl = 5          
            self.right_of_me_idx = 6
            self.left_of_me_idx = 2                        
        elif self.yaw >= 360-22.5 or self.yaw <= 0+22.5 :
            self.front_of_me_idx = 7
            self.front_of_me_idxr = 6
            self.front_of_me_idxl = 8
            self.right_of_me_idx = 3
            self.left_of_me_idx = 5                        
        elif self.yaw >= 0+22.5 and self.yaw <= 90-22.5 :
            self.front_of_me_idx = 6
            self.front_of_me_idxr = 3
            self.front_of_me_idxl = 7          
            self.right_of_me_idx = 0
            self.left_of_me_idx = 8                        
        elif self.yaw >= 90-22.5 and self.yaw <= 90+22.5 :
            self.front_of_me_idx = 3
            self.front_of_me_idxr = 0
            self.front_of_me_idxl = 6
            self.right_of_me_idx = 1
            self.left_of_me_idx = 7                        
        elif self.yaw >= 90+22.5 and self.yaw <= 180-22.5 :
            self.front_of_me_idx = 0
            self.front_of_me_idxr = 1
            self.front_of_me_idxl = 3
            self.right_of_me_idx = 2
            self.left_of_me_idx = 6                        
        else:
            print("There is great disturbance in the Force...")            

    def whatISee(self, observations):
        self.lookingat = "NOTHING"            
        if "LineOfSight" in observations:
            lineOfSight = observations["LineOfSight"] 
            self.lookingat = lineOfSight["type"]      

    def whatMyPos(self, observations):
        if "Yaw" in observations:
            self.yaw = int(observations["Yaw"])
        if "Pitch" in observations:
            self.pitch = int(observations["Pitch"])
        if "XPos" in observations:
            self.x = int(observations["XPos"])
        if "ZPos" in observations:
            self.z = int(observations["ZPos"])        
        if "YPos" in observations:
            self.y = int(observations["YPos"])        
            
    def run(self):
        world_state = self.agent_host.getWorldState()
        # Loop until mission ends:
        while world_state.is_mission_running:
            
            #print(">>> nb4tf4i arena -----------------------------------\n")
            act = self.action(world_state)
            #print("nb4tf4i arena >>> -----------------------------------\n")
            if not act:
                self.idle(.017)
            world_state = self.agent_host.getWorldState()

    def action(self, world_state):
        for error in world_state.errors:
            print("Error:", error.text)
        
        if world_state.number_of_observations_since_last_state == 0:
            #print("    NO OBSERVATIONS NO ACTIONS")
            return False
        
        input = world_state.observations[-1].text
        observations = json.loads(input)
        nbr = observations.get("nbr3x3", 0)
        #print(observations)
        
        self.whatMyPos(observations)
        print("\r    Steve's Coords: ", self.x, self.y, self.z, end='')        
        #print("    Steve's Yaw: ", self.yaw)        
        #print("    Steve's Pitch: ", self.pitch)        

        self.checkInventory(observations)
        #print("Number of flowers: ", self.nof_red_flower)

        self.whatISee(observations)
        #print("    Steve's <): ", self.lookingat)
                        
        self.calcNbrIndex()                
                        
        if self.isInTrap(nbr) :
            self.agent_host.sendCommand( "jumpmove 1" )
            time.sleep(.1)
            self.turnFromWall(nbr)
            self.agent_host.sendCommand( "jumpmove 1" )
            time.sleep(.1)            
            return True

        if self.lookingat == "red_flower":
            print(" A RED FLOWER IS FOUND (lookingat)")
            self.pickUp()
            return True
        
        for i in range(9):
            if nbr[i]=="red_flower" or nbr[i+9]=="red_flower" or nbr[i+18]=="red_flower":
                print("        I CAN SEE A RED FLOWER: ", i, " LEVEL ", self.y)
                if i == self.front_of_me_idx :
                    print("F            A RED FLOWER IS RIGTH IN FRONT OF ME")
                    self.agent_host.sendCommand( "move 1" )
                    time.sleep(.2)
                    self.agent_host.sendCommand( "look 1" )
                    time.sleep(.2)
                    print("Steve <) ", self.lookingat)
                    return True
                elif i == self.front_of_me_idxr :
                    print("R            A RED FLOWER IS RIGTH IN RIGHT OF ME")
                    self.agent_host.sendCommand( "strafe 1" )
                    time.sleep(.2)
                    return True
                elif i == self.front_of_me_idxl :
                    print("L            A RED FLOWER IS RIGTH IN LEFT OF ME")
                    self.agent_host.sendCommand( "strafe -1" )
                    time.sleep(.2)
                    return True
                elif i == 4  :
                    self.red_flower_is_mining = True
                    print("            I AM STANDING ON A RED FLOWER!!!")
                    
                    if self.pitch != 90:
                        self.agent_host.sendCommand( "look 1" )
                        print("PITCH            I AM STANDING ON A RED FLOWER!!!")
                        time.sleep(.3)
                    else:
                        print("ATTACK            I AM STANDING ON A RED FLOWER!!! LEVEL ", self.y)
                        self.pickUp()
                        self.agent_host.sendCommand( "look -1" )
                        time.sleep(.3)
                    return True
                
                else :
                    print("            I AM TURNING TO A RED FLOWER")
                    self.agent_host.sendCommand( "turn 1" )
                    time.sleep(.2)
                    return True
  
        if self.lvlUp(nbr):
            print("        LVL UP")

        if nbr[self.front_of_me_idx+9]!="air" and nbr[self.front_of_me_idx+9]!="red_flower":
            print("        THERE ARE OBSTACLES IN FRONT OF ME ",  nbr[self.front_of_me_idx], end='')
  
            self.turnFromWall(nbr)
                        
        else:
            print("        THERE IS NO OBSTACLE IN FRONT OF ME", end='')
            
            if nbr[self.front_of_me_idx]=="dirt":
                self.agent_host.sendCommand( "move 1" )
                time.sleep(.01)#013
            else:
                self.turnFromWall(nbr)                
                
        return True        

num_repeats = 1
for ii in range(num_repeats):

    my_mission_record = MalmoPython.MissionRecordSpec()

    # Attempt to start a mission:
    max_retries = 6
    for retry in range(max_retries):
        try:
            agent_host.startMission( my_mission, my_mission_record )
            break
        except RuntimeError as e:
            if retry == max_retries - 1:
                print("Error starting mission:", e)
                exit(1)
            else:
                print("Attempting to start the mission:")
                time.sleep(2)

    # Loop until mission starts:
    print("   Waiting for the mission to start")
    world_state = agent_host.getWorldState()

    while not world_state.has_mission_begun:
        print("\r"+hg.cursor(), end="")
        time.sleep(0.15)
        world_state = agent_host.getWorldState()
        for error in world_state.errors:
            print("Error:",error.text)

    print("NB4tf4i Red Flower Hell running\n")
    steve = Steve(agent_host)
    steve.run()
    print("Number of flowers: "+ str(steve.nof_red_flower))
    time.sleep(3)

print("Mission ended")
# Mission has ended.
]]>
        </programlisting>
    </section>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
</chapter>                
