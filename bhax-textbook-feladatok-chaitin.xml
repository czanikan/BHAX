<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chaitin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <note>
        <title>Futtatási videó: </title>
        <para><link xlink:href="https://youtu.be/yBEQo_MVJvE">https://youtu.be/yBEQo_MVJvE</link></para>
    </note>
    <section>
        <title>Iteratív és rekurzív faktoriális Lisp-ben</title>
        <para>
            Kezdésként mi is az a Lisp? Ugye rengeteg programozási nyelv van (olyanok is mint a beef, chicken vagy a brainfuck) 
            és nehéz is mindet számontartani. De azért a lisp nem egy vicc nyelv, mert komoly szerepe volt az 
            első körös mesterséges intelligencia kutásban (ez mondjuk inkább a terveőjén, John McCarthy-n múlott), mikor az első aranykorát 
            élte az 50-60as években. 
        </para>
        <para>
            A nyelven magán eléggé érződik, hogy az 50es években született, matematikai beállítottsága miatt. 
            Viszont van pár tulajdonsága ami a mai felhasználót könnyen elijeszthet. Ilyen például, hogy a Lisp adatstruktúrája 
            láncolt lista, ezért minden összetartozó elemet, mint argumentumot, zárójelek kötnek össze. 
            Ez a számítógépnek egyszerűen értelmezhető, sajnos a felhasználónaek egy hosszabb utasítás esetén kevésbé.
            Másik apró furcsaság lehet, hogy a programnyelv prefix-jelölést használ, ellentétben az általunk megszokott infix-jelöléstől.
            Magyarra fordítva ez azt jelenti, hogy például a műveleti jelek a számok előtt vannak (lsd. (* f (+ i 1))).
        </para>
        <para>
            A feladat megoldása Besenczi Renátó videója alapján készült. 
            <link xlink:href="https://youtu.be/3jcDl4pHFMI">https://youtu.be/3jcDl4pHFMI</link>
        </para>
        <programlisting language="Lisp">
            <![CDATA[ 
            #!/usr/bin/clisp

            (format t "Give a number: ~%")
            
            (setq n (read))
            
            (defun factorial_iterative (n)
                (let ((f 1))
                    (dotimes (i n)
                    (setf f (* f (+ i 1))))
                    f 
                )
            )
            
            (defun factorial_recursive (n)
                (if (= n 0)
                    1
                    (* n (factorial_recursive(- n 1)))
                ) 
            )
            
            (format t "Recursive: ~%")
            
            (loop for i from 0 to n
                do (format t "~D! = ~D~%" i (factorial_recursive i)))
            
            (format t "Iterative: ~%")
            
            (loop for i from 0 to n
                do (format t "~D! = ~D~%" i (factorial_iterative i)))
                
            ]]>
        </programlisting>
        <para>
            A program maga nem túl bonyolúlt, bekérünk egy számot a felhasználótól, majd elvégezzük a műveletet iteratív és 
            rekurzív függvénnyel is. 
            Az iteratív esetén egyszerűen addig szorozgatjuk össze a számokat, míg el nem érjük a kívánt számot. Ehhez használjuk a 
            <function>dotimes</function> makro függvényt, melyben az f értékét folyamatosan (f * (i + 1)-re állítjuk. Ehhez felhasználtuk 
            a faktoriális függvény formális definícióját. 
        </para>
        
        <mediaobject>
            <imageobject>
                <imagedata fileref="Pics/faktKep.png" scale="100" />
            </imageobject>
            <textobject>
                <phrase>A faktoriális függvény formális definíciója</phrase>
            </textobject>
        </mediaobject>
        
        <para>
            Talán a rekurziós eljárás mégegyszerűbb, hiszen ott a barátságosabb rekurzív képletet alkalmaztuk, azaz n! = n * (n - 1)!. 
            Ugye a rekurzív függvények lényege, hogy meghívják saját magukat, így lehet egyértelmű, hogy mindig érdemes egy kilépési 
            feltétellel kezdeni, mivel ha kimarad, akkor könnyen úgy járhatunk mint a ciklusok esetén, hogy egy végtelen iterációba 
            kerülünk. A mi feltételünk itt az, hogy ha n = 0, akkor a függvény újboli meghívása helyett, egyszerűen csak kilépünk az 1-el. 
            Ezt ugye nem kell részleteznem, a 0! definíció szerint 1. Ha pedig az n nem 1, akkor lefut a képlet része, mely újra és újra 
            meghívja magát, míg az n el nem éri a nullát.  
        </para>
        <para>
            Futtatás után: 
        </para>
        <screen>
            <![CDATA[ 
            Give a number: 
            5
            Recursive: 
            0! = 1
            1! = 1
            2! = 2
            3! = 6
            4! = 24
            5! = 120
            Iterative: 
            0! = 1
            1! = 1
            2! = 2
            3! = 6
            4! = 24
            5! = 120
            ]]>
        </screen>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/z6NJE2a1zIA">https://youtu.be/z6NJE2a1zIA</link>      
        </para>
        <para>
            Megoldás forrása:                
        </para>
    </section>        
<!--        
    <section>
        <title>Weizenbaum Eliza programja</title>
        <para>
            Éleszd fel Weizenbaum Eliza programját!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
    </section>        
-->
<!--
    <section>
        <title>Passz: Gimp Scheme Script-fu: króm effekt</title>
        <para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely megvalósítja a króm effektet egy 
            bemenő szövegre!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/OKdAkI_c7Sc">https://youtu.be/OKdAkI_c7Sc</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Chrome">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Chrome</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>    
    </section>        
-->
<!--
    <section>
        <title>Passz: Gimp Scheme Script-fu: név mandala</title>
        <para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely név-mandalát készít a
            bemenő szövegből!               
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv">https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Mandala">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/GIMP_Lisp/Mandala</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
-->
<!--    
    <section>
        <title>Lambda</title>
        <para>
            Hasonlítsd össze a következő programokat!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
-->    

<!--
    <section>
        <title>Omega</title>
        <para>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
    </section>        
-->      
    <section>
        <title>Malmo</title>
        <para>
            Ez a továbbfejlesztett verziója annak a kódnak, amivel az RFIII-ra neveztünk Tutor Tündével és tabellásak lettünk. 
        </para>
        <programlisting language="python">
            <![CDATA[ 
            from __future__ import print_function
# ------------------------------------------------------------------------------------------------
# Copyright (c) 2016 Microsoft Corporation
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ------------------------------------------------------------------------------------------------

# Tutorial sample #2: Run simple mission using raw XML

# Added modifications by Norbert Bátfai (nb4tf4i) batfai.norbert@inf.unideb.hu, mine.ly/nb4tf4i.1
# 2018.10.18, https://bhaxor.blog.hu/2018/10/18/malmo_minecraft
# 2020.02.02, NB4tf4i's Red Flowers, http://smartcity.inf.unideb.hu/~norbi/NB4tf4iRedFlowerHell


from builtins import range
import MalmoPython
import os
import sys
import time
import random
import json
import math

if sys.version_info[0] == 2:
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)  # flush print output immediately
else:
    import functools
    print = functools.partial(print, flush=True)

# Create default Malmo objects:

agent_host = MalmoPython.AgentHost()
try:
    agent_host.parse( sys.argv )
except RuntimeError as e:
    print('ERROR:',e)
    print(agent_host.getUsage())
    exit(1)
if agent_host.receivedArgument("help"):
    print(agent_host.getUsage())
    exit(0)

# -- set up the mission -- #
missionXML_file='nb4tf4i_d.xml'
with open(missionXML_file, 'r') as f:
    print("NB4tf4i's Red Flowers (Red Flower Hell) - DEAC-Hackers Battle Royale Arena\n")
    print("NB4tf4i vörös pipacsai (Vörös Pipacs Pokol) - DEAC-Hackers Battle Royale Arena\n\n")
    print("The aim of this first challenge, called nb4tf4i's red flowers, is to collect as many red flowers as possible before the lava flows down the hillside.\n")
    print("Ennek az első, az nb4tf4i vörös virágai nevű kihívásnak a célja összegyűjteni annyi piros virágot, amennyit csak lehet, mielőtt a láva lefolyik a hegyoldalon.\n")    
    print("Norbert Bátfai, batfai.norbert@inf.unideb.hu, https://arato.inf.unideb.hu/batfai.norbert/\n\n")    
    print("Loading mission from %s" % missionXML_file)
    mission_xml = f.read()
    my_mission = MalmoPython.MissionSpec(mission_xml, True)
    my_mission.drawBlock( 0, 0, 0, "lava")


class Hourglass:
    def __init__(self, charSet):
        self.charSet = charSet
        self.index = 0
    def cursor(self):
        self.index=(self.index+1)%len(self.charSet)
        return self.charSet[self.index]

hg = Hourglass('|/-\|')

class Steve:
    def __init__(self, agent_host):
        self.agent_host = agent_host
        self.x = 0
        self.y = 0
        self.z = 0        
        self.yaw = 0
        self.pitch = 0     

    def pickUp(self):
        self.agent_host.sendCommand( "attack 1" )
        time.sleep(.23)

    def calcNbrIndex(self):
        if self.yaw >= 180-22.5 and self.yaw <= 180+22.5 :
            self.front_of_me_idx = 1
            self.front_of_me_idxr = 2
            self.front_of_me_idxl = 0
            self.right_of_me_idx = 5
            self.left_of_me_idx = 3            
        elif self.yaw >= 180+22.5 and self.yaw <= 270-22.5 :
            self.front_of_me_idx = 2 
            self.front_of_me_idxr = 5
            self.front_of_me_idxl =1             
            self.right_of_me_idx = 8
            self.left_of_me_idx = 0            
        elif self.yaw >= 270-22.5 and self.yaw <= 270+22.5 :
            self.front_of_me_idx = 5
            self.front_of_me_idxr = 8
            self.front_of_me_idxl = 2
            self.right_of_me_idx = 7
            self.left_of_me_idx = 1                        
        elif self.yaw >= 270+22.5 and self.yaw <= 360-22.5 :
            self.front_of_me_idx = 8            
            self.front_of_me_idxr = 7
            self.front_of_me_idxl = 5          
            self.right_of_me_idx = 6
            self.left_of_me_idx = 2                        
        elif self.yaw >= 360-22.5 or self.yaw <= 0+22.5 :
            self.front_of_me_idx = 7
            self.front_of_me_idxr = 6
            self.front_of_me_idxl = 8
            self.right_of_me_idx = 3
            self.left_of_me_idx = 5                        
        elif self.yaw >= 0+22.5 and self.yaw <= 90-22.5 :
            self.front_of_me_idx = 6
            self.front_of_me_idxr = 3
            self.front_of_me_idxl = 7          
            self.right_of_me_idx = 0
            self.left_of_me_idx = 8                        
        elif self.yaw >= 90-22.5 and self.yaw <= 90+22.5 :
            self.front_of_me_idx = 3
            self.front_of_me_idxr = 0
            self.front_of_me_idxl = 6
            self.right_of_me_idx = 1
            self.left_of_me_idx = 7                        
        elif self.yaw >= 90+22.5 and self.yaw <= 180-22.5 :
            self.front_of_me_idx = 0
            self.front_of_me_idxr = 1
            self.front_of_me_idxl = 3
            self.right_of_me_idx = 2
            self.left_of_me_idx = 6                        
        else:
            print("There is great disturbance in the Force...")      

    def run(self):
        world_state = self.agent_host.getWorldState()
        # Loop until mission ends:
        i = 0
        for i in range(30):
            self.agent_host.sendCommand( "jumpmove 1" )
            time.sleep(0.1)
            self.agent_host.sendCommand( "move 1" )
            time.sleep(0.1)
        
        self.agent_host.sendCommand( "turn 1" )
        time.sleep(0.2)
        self.agent_host.sendCommand( "look 1" )
        self.agent_host.sendCommand( "look 1" )

        while world_state.is_mission_running:
            
            #print(">>> nb4tf4i arena -----------------------------------\n")
            self.action(world_state)
            #print("nb4tf4i arena >>> -----------------------------------\n")
                                
            world_state = self.agent_host.getWorldState()

    def action(self, world_state):

        for error in world_state.errors:
            print("Error:", error.text)
        if world_state.number_of_observations_since_last_state == 0:
            #print("    NO OBSERVATIONS NO ACTIONS")
            return False

            #if world_state.number_of_observations_since_last_state != 0:
        print("--- nb4tf4i arena -----------------------------------\n")
                
        sensations = world_state.observations[-1].text
        print("    sensations: ", sensations)                
        observations = json.loads(sensations)
        nbr= observations.get("nbr3x3", 0)
        print("    3x3x3 neighborhood of Steve: ", nbr)
                
        if "Yaw" in observations:
            self.yaw = int(observations["Yaw"])
        if "Pitch" in observations:
            self.pitch = int(observations["Pitch"])
        if "XPos" in observations:
            self.x = int(observations["XPos"])
        if "ZPos" in observations:
            self.z = int(observations["ZPos"])        
        if "YPos" in observations:
            self.y = int(observations["YPos"])  
                
        print("    Steve's Coords: ", self.x, self.y, self.z)        
        print("    Steve's Yaw: ", self.yaw)        
        print("    Steve's Pitch: ", self.pitch)   

        '''
                if "LineOfSight" in observations:
                    LineOfSight = observations["LineOfSight"]
                    self.lookingat = LineOfSight["type"]
                print("    Steve's <): ", self.lookingat)

                if self.lookingat == "red_flower":
                    print("    VIRAG!!") 
        '''

        self.calcNbrIndex()                

                #checking corners

        if nbr[self.front_of_me_idx+9] == "dirt" and nbr[self.left_of_me_idx+9] == "dirt":
            self.agent_host.sendCommand( "turn 1" )
            time.sleep(0.2)

        else:
            print("There is no corner")      
                    
                #checking lava

        if nbr[self.left_of_me_idx+18]=="flowing_lava" or nbr[self.front_of_me_idx+9]=="flowing_lava" or nbr[self.front_of_me_idx+18]=="flowing_lava":
            self.agent_host.sendCommand( "strafe 1" )
            time.sleep(0.1)
            self.agent_host.sendCommand( "strafe 1" )
            time.sleep(0.1)

                #checking traps

        if nbr[self.front_of_me_idx+9]=="dirt" and nbr[self.right_of_me_idx+9]=="dirt" and nbr[self.left_of_me_idx+9]=="dirt":
            print("     IT'S A TRAAAAP")
            self.agent_host.sendCommand( "jumpmove 1" )
            time.sleep(0.1)

        if nbr[self.front_of_me_idx+9]=="dirt" and nbr[self.left_of_me_idx+9]=="air":
            self.agent_host.sendCommand( "turn 1" )
            time.sleep(0.2)
            self.agent_host.sendCommand( "jumpstrafe 1" )
            time.sleep(0.1)
            self.agent_host.sendCommand( "jumpstrafe 1" )
            time.sleep(0.1)
                
        if nbr[self.front_of_me_idx+9]=="red_flower":
            print("    VIRAGOT SZEDEK!!")
            #self.agent_host.sendCommand( "move 1" )
            #time.sleep(0.2)
            self.pickUp()
            time.sleep(0.2)
            self.agent_host.sendCommand( "jumpstrafe 1" )
            time.sleep(0.1)
            self.agent_host.sendCommand( "jumpstrafe 1" )
            time.sleep(0.1)
                
        if nbr[self.front_of_me_idx+9] == "air" and nbr[self.front_of_me_idx] == "dirt":
            self.agent_host.sendCommand( "move 1" )
            time.sleep(0.05)

        if nbr[self.front_of_me_idx+9] == "air" and nbr[self.front_of_me_idx] == "air":
            self.agent_host.sendCommand( "move 1" )
            time.sleep(0.05)
                    
            #self.agent_host.sendCommand( "look -1" ) 
            #self.agent_host.sendCommand( "look -1" )   


    

num_repeats = 1
for ii in range(num_repeats):

    my_mission_record = MalmoPython.MissionRecordSpec()

    # Attempt to start a mission:
    max_retries = 6
    for retry in range(max_retries):
        try:
            agent_host.startMission( my_mission, my_mission_record )
            break
        except RuntimeError as e:
            if retry == max_retries - 1:
                print("Error starting mission:", e)
                exit(1)
            else:
                print("Attempting to start the mission:")
                time.sleep(2)

    # Loop until mission starts:
    print("   Waiting for the mission to start ")
    world_state = agent_host.getWorldState()

    while not world_state.has_mission_begun:
        print("\r"+hg.cursor(), end="")
        time.sleep(0.15)
        world_state = agent_host.getWorldState()
        for error in world_state.errors:
            print("Error:",error.text)

    print("NB4tf4i Red Flower Hell running\n")
    steve = Steve(agent_host)
    steve.run()

print("Mission ended")
# Mission has ended.
            ]]>
        </programlisting>
        <para>
            Ez pedig  c++ átírata: 
        </para>
        <programlisting language = "c++">
            <![CDATA[ 
            // --------------------------------------------------------------------------------------------------
            //  Copyright (c) 2016 Microsoft Corporation
            //  
            //  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
            //  associated documentation files (the "Software"), to deal in the Software without restriction,
            //  including without limitation the rights to use, copy, modify, merge, publish, distribute,
            //  sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
            //  furnished to do so, subject to the following conditions:
            //  
            //  The above copyright notice and this permission notice shall be included in all copies or
            //  substantial portions of the Software.
            //  
            //  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
            //  NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
            //  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            //  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            //  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
            // --------------------------------------------------------------------------------------------------
            
            // Malmo:
            #include <AgentHost.h>
            #include <ClientPool.h>
            #include <boost/property_tree/json_parser.hpp>
            #include <boost/property_tree/ptree.hpp>
            #include <boost/foreach.hpp>
            using namespace malmo;
            
            // STL:
            #include <cstdlib>
            #include <exception>
            #include <iostream>
            using namespace std;
            
            #include <boost/property_tree/ptree.hpp>
            #include <boost/property_tree/json_parser.hpp>
            
            vector<string> GetItems(WorldState world_state,std::stringstream & ss, boost::property_tree::ptree & pt)
            {
                vector<string> nbr3x3;
            
                ss.clear();
                pt.clear();
            
                ss << world_state.observations.at(0).get()->text;
                boost::property_tree::read_json(ss, pt);
                BOOST_FOREACH(boost::property_tree::ptree::value_type &v, pt.get_child("nbr3x3"))
                {
                    assert(v.first.empty());
                    nbr3x3.push_back(v.second.data());
                }
            
                return nbr3x3;
            }
                void calcNbrIndex();
                    int front_of_me_idx = 0;
                    int front_of_me_idxr = 0;
                    int front_of_me_idxl = 0;        
                    int right_of_me_idx = 0;
                    int left_of_me_idx = 0; 
                    
                    int yaw = 0;
            
            int main(int argc, const char **argv)
            {
            
                int virag = 0;
                int y = 0;
            
                AgentHost agent_host;
            
                try
                {
                    agent_host.parseArgs(argc, argv);
                }
                catch( const exception& e )
                {
                    cout << "ERROR: " << e.what() << endl;
                    cout << agent_host.getUsage() << endl;
                    return EXIT_SUCCESS;
                }
                if( agent_host.receivedArgument("help") )
                {
                    cout << agent_host.getUsage() << endl;
                    return EXIT_SUCCESS;
                }
            
                std::ifstream xmlf{"nb4tf4i_d.xml"};
                std::string xml{std::istreambuf_iterator<char>(xmlf), std::istreambuf_iterator<char>()};
            
                MissionSpec my_mission{xml, true};
                
            
                MissionRecordSpec my_mission_record("./saved_data.tgz");
                
            
                int attempts = 0;
                bool connected = false;
                do {
                    try {
                        agent_host.startMission(my_mission, my_mission_record);
                        connected = true;
                    }
                    catch (exception& e) {
                        cout << "Error starting mission: " << e.what() << endl;
                        attempts += 1;
                        if (attempts >= 3)
                            return EXIT_FAILURE;    // Give up after three attempts.
                        else
                            boost::this_thread::sleep(boost::posix_time::milliseconds(1000));   // Wait a second and try again.
                    }
                } while (!connected);
            
                WorldState world_state;
            
                cout << "Waiting for the mission to start" << flush;
                do {
                    cout << "." << flush;
                    boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                    world_state = agent_host.getWorldState();
                    for( boost::shared_ptr<TimestampedString> error : world_state.errors )
                        cout << "Error: " << error->text << endl;
                } while (!world_state.has_mission_begun);
                cout << endl;
                
            
                for (int i = 0; i < 30; i++)
                {
                    agent_host.sendCommand("jumpmove 1");
                    boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                    agent_host.sendCommand("move 1");
                    boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                }
                agent_host.sendCommand("turn 1");
                boost::this_thread::sleep(boost::posix_time::milliseconds(200));
                agent_host.sendCommand("look 1");
                agent_host.sendCommand("look 1");
            
                // main loop:
                do {
            
                    if(world_state.number_of_observations_since_last_state != 0)
                    {
                        std::stringstream ss;
                        ss << world_state.observations.at(0).get()->text;
                        boost::property_tree::ptree pt;
                        boost::property_tree::read_json(ss, pt);
            
                        vector<std::string> nbr3x3;
            
                        nbr3x3 = GetItems(world_state,ss,pt);
                        for(vector< boost::shared_ptr< TimestampedString>>::iterator it = world_state.observations.begin();it !=world_state.observations.end();++it)
                        {
                        boost::property_tree::ptree pt;
                        istringstream iss((*it)->text);
                        boost::property_tree::read_json(iss, pt);
            
                        //string x =pt.get<string>("LineOfSight.type");	
                        //string LookingAt =pt.get<string>("XPos");
                        //y = pt.get<double>("YPos");
                        yaw = pt.get<double>("Yaw");
                        //cout<<" Steve's Coords: "<<y<<" "<<yaw<<" "<<"RF:"<<virag;
                        }
            
                        calcNbrIndex();
            
                        //checking corners
            
                        if (nbr3x3[front_of_me_idx+9] == "dirt" && nbr3x3[left_of_me_idx+9] == "dirt")
                        {
                            agent_host.sendCommand("turn 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(300));
                        }
                        else 
                            cout << "\nThere is no corner";
            
                        //checking lava
                        if (nbr3x3[left_of_me_idx+18] == "flowing_lava" || nbr3x3[front_of_me_idx+9] == "flowing lava"
                            || nbr3x3[front_of_me_idx+18] == "flowing_lava")
                        {
                            agent_host.sendCommand("strafe 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                            agent_host.sendCommand("strafe 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                        }
            
                        //checking traps
                        if (nbr3x3[front_of_me_idx+9] == "dirt" && nbr3x3[right_of_me_idx+9] == "dirt" 
                            && nbr3x3[left_of_me_idx+9] == "dirt")
                        {
                            cout << "\nIt's a TRAAAAP";
                            agent_host.sendCommand("jumpmove 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                        }
            
                        if (nbr3x3[front_of_me_idx+9] == "dirt" && nbr3x3[left_of_me_idx+9] == "air")
                        {
                            agent_host.sendCommand("turn 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(200));
                            agent_host.sendCommand("jumpstrafe 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                            agent_host.sendCommand("jumpstrafe 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                        }
            
                        //finding flower
                        if (nbr3x3[front_of_me_idx+9] == "red_flower")
                        {
                            cout << "\nVIRÁGOT SZEDEK!!";
                            agent_host.sendCommand("attack 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(230));
                            boost::this_thread::sleep(boost::posix_time::milliseconds(200));
                            agent_host.sendCommand("jumpstrafe 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                            agent_host.sendCommand("jumpstrafe 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(100));
                        }
            
                        if (nbr3x3[front_of_me_idx+9] == "air" && nbr3x3[front_of_me_idx] == "dirt")
                        {
                            agent_host.sendCommand("move 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(50));
                        }
            
            
                        if (nbr3x3[front_of_me_idx+9] == "air" && nbr3x3[front_of_me_idx] == "air")
                        {
                            agent_host.sendCommand("move 1");
                            boost::this_thread::sleep(boost::posix_time::milliseconds(50));
                        }
                    }
            
                    world_state = agent_host.getWorldState();
                    for( boost::shared_ptr<TimestampedString> error : world_state.errors )
                        cout << "Error: " << error->text << endl;
            
                    
                } while (world_state.is_mission_running);
            
                cout << "Mission has stopped." << endl;
            
                return EXIT_SUCCESS;
            
            }
            
            void calcNbrIndex()
                {
                    if (yaw >= 180-22.5 and yaw <= 180+22.5)
                    {
                        front_of_me_idx = 1;
                        front_of_me_idxr = 2;
                        front_of_me_idxl = 0;
                        right_of_me_idx = 5;
                        left_of_me_idx = 3; 
                    }
                    else if (yaw >= 180+22.5 and yaw <= 270-22.5)
                    {
                        front_of_me_idx = 2; 
                        front_of_me_idxr = 5;
                        front_of_me_idxl =1;             
                        right_of_me_idx = 8;
                        left_of_me_idx = 0;
                    }            
                    else if (yaw >= 270-22.5 and yaw <= 270+22.5) 
                    {
                        front_of_me_idx = 5;
                        front_of_me_idxr = 8;
                        front_of_me_idxl = 2;
                        right_of_me_idx = 7;
                        left_of_me_idx = 1;   
                    }
                    else if (yaw >= 270+22.5 and yaw <= 360-22.5)
                    {
                        front_of_me_idx = 8;            
                        front_of_me_idxr = 7;
                        front_of_me_idxl = 5;          
                        right_of_me_idx = 6;
                        left_of_me_idx = 2;    
                    }
                    else if (yaw >= 360-22.5 or yaw <= 0+22.5)
                    {
                        front_of_me_idx = 7;
                        front_of_me_idxr = 6;
                        front_of_me_idxl = 8;
                        right_of_me_idx = 3;
                        left_of_me_idx = 5;     
                    }
                    else if (yaw >= 0+22.5 and yaw <= 90-22.5) 
                    {
                        front_of_me_idx = 6;
                        front_of_me_idxr = 3;
                        front_of_me_idxl = 7;         
                        right_of_me_idx = 0;
                        left_of_me_idx = 8;   
                    }
                    else if (yaw >= 90-22.5 and yaw <= 90+22.5) 
                    {
                        front_of_me_idx = 3;
                        front_of_me_idxr = 0;
                        front_of_me_idxl = 6;
                        right_of_me_idx = 1;
                        left_of_me_idx = 7;    
                    }
                    else if (yaw >= 90+22.5 and yaw <= 180-22.5)
                    {
                        front_of_me_idx = 0;
                        front_of_me_idxr = 1;
                        front_of_me_idxl = 3;
                        right_of_me_idx = 2;
                        left_of_me_idx = 6;  
                    }
                    else
                        cout<<"There is great disturbance in the Force...";
                }
            
            ]]>
        </programlisting>
    </section
</chapter>                
